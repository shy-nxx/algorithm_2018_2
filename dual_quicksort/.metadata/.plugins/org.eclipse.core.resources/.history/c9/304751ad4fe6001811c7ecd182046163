import java.util.Random;

public class MergeSort {
	static void mergeSort(int[] array, int low, int high){
		if(low < high){
			int middle = (low + high) / 2;
			mergeSort(array, low, middle);
			mergeSort(array, middle+1, high);
			merge(array, low, middle, high);
		}
	}

	static void merge(int[] array, int low, int middle, int high){
		int[] helper = new int[array.length];
		for (int i = low; i <= high; i++) {
			helper[i] = array[i];
		}

		int helperLeft = low;
		int helperRight = middle+1;
		int current = low;

		while (helperLeft <= middle && helperRight <=high) {
			if(helper[helperLeft] <= helper[helperRight]){
				array[current] = helper[helperLeft];
				helperLeft++;

			}else{
				array[current] = helper[helperRight];
				helperRight++;
			}
			current ++;
		}

		int remaining = middle - helperLeft;
		for (int i = 0; i <= remaining; i++) {
			array[current+i] = helper[helperLeft+ i];
		}
	}
	public static void main(String[] args) {
		Random random = new Random();
		int[] arr = new int[800000];
		for (int i = 0; i < arr.length; i++ )
			arr[i] = random.nextInt(800000);
		long start_time = System.currentTimeMillis();
		mergeSort(arr, 0, arr.length-1);
		long end_time = System.currentTimeMillis();

		System.out.println("computation time = " + (end_time - start_time) + "ms");
		
	

	}
}


